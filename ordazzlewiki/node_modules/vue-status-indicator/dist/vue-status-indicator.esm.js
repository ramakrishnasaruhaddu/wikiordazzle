//
//
//

var script = {
  name: 'StatusIndicator',
  props: {
    status: {
      type: String,
      default: '',
      validator(value) {
        if (value === '') return true;
        return ['active', 'positive', 'intermediary', 'negative'].indexOf(value) !== -1;
      },
    },
    pulse: {
      type: Boolean,
      default: false,
    },
  },
};

function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier
/* server only */
, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
  if (typeof shadowMode !== 'boolean') {
    createInjectorSSR = createInjector;
    createInjector = shadowMode;
    shadowMode = false;
  } // Vue.extend constructor export interop.


  var options = typeof script === 'function' ? script.options : script; // render functions

  if (template && template.render) {
    options.render = template.render;
    options.staticRenderFns = template.staticRenderFns;
    options._compiled = true; // functional template

    if (isFunctionalTemplate) {
      options.functional = true;
    }
  } // scopedId


  if (scopeId) {
    options._scopeId = scopeId;
  }

  var hook;

  if (moduleIdentifier) {
    // server build
    hook = function hook(context) {
      // 2.3 injection
      context = context || // cached call
      this.$vnode && this.$vnode.ssrContext || // stateful
      this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional
      // 2.2 with runInNewContext: true

      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__;
      } // inject component styles


      if (style) {
        style.call(this, createInjectorSSR(context));
      } // register component module identifier for async chunk inference


      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier);
      }
    }; // used by ssr in case component is cached and beforeCreate
    // never gets called


    options._ssrRegister = hook;
  } else if (style) {
    hook = shadowMode ? function () {
      style.call(this, createInjectorShadow(this.$root.$options.shadowRoot));
    } : function (context) {
      style.call(this, createInjector(context));
    };
  }

  if (hook) {
    if (options.functional) {
      // register for functional component in vue file
      var originalRender = options.render;

      options.render = function renderWithStyleInjection(h, context) {
        hook.call(context);
        return originalRender(h, context);
      };
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate;
      options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
    }
  }

  return script;
}

var normalizeComponent_1 = normalizeComponent;

var isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
function createInjector(context) {
  return function (id, style) {
    return addStyle(id, style);
  };
}
var HEAD;
var styles = {};

function addStyle(id, css) {
  var group = isOldIE ? css.media || 'default' : id;
  var style = styles[group] || (styles[group] = {
    ids: new Set(),
    styles: []
  });

  if (!style.ids.has(id)) {
    style.ids.add(id);
    var code = css.source;

    if (css.map) {
      // https://developer.chrome.com/devtools/docs/javascript-debugging
      // this makes source maps inside style tags work properly in Chrome
      code += '\n/*# sourceURL=' + css.map.sources[0] + ' */'; // http://stackoverflow.com/a/26603875

      code += '\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) + ' */';
    }

    if (!style.element) {
      style.element = document.createElement('style');
      style.element.type = 'text/css';
      if (css.media) style.element.setAttribute('media', css.media);

      if (HEAD === undefined) {
        HEAD = document.head || document.getElementsByTagName('head')[0];
      }

      HEAD.appendChild(style.element);
    }

    if ('styleSheet' in style.element) {
      style.styles.push(code);
      style.element.styleSheet.cssText = style.styles.filter(Boolean).join('\n');
    } else {
      var index = style.ids.size - 1;
      var textNode = document.createTextNode(code);
      var nodes = style.element.childNodes;
      if (nodes[index]) style.element.removeChild(nodes[index]);
      if (nodes.length) style.element.insertBefore(textNode, nodes[index]);else style.element.appendChild(textNode);
    }
  }
}

var browser = createInjector;

/* script */
const __vue_script__ = script;

/* template */
var __vue_render__ = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',_vm._b({staticClass:"status-indicator",attrs:{"pulse":_vm.pulse}},"span",_vm._d({},[_vm.status,true])))};
var __vue_staticRenderFns__ = [];

  /* style */
  const __vue_inject_styles__ = function (inject) {
    if (!inject) return
    inject("data-v-8576e0ca_0", { source: ":root{--status-indicator-size:10px;--status-indicator-animation-duration:2s;--status-indicator-color:rgb(216, 226, 233);--status-indicator-color-semi:rgba(216, 226, 233, .5);--status-indicator-color-transparent:rgba(216, 226, 233, 0);--status-indicator-color-active:rgb(0, 149, 255);--status-indicator-color-active-semi:rgba(0, 149, 255, .5);--status-indicator-color-active-transparent:rgba(0, 149, 255, 0);--status-indicator-color-positive:rgb(75, 210, 143);--status-indicator-color-positive-semi:rgba(75, 210, 143, .5);--status-indicator-color-positive-transparent:rgba(75, 210, 143, 0);--status-indicator-color-intermediary:rgb(255, 170, 0);--status-indicator-color-intermediary-semi:rgba(255, 170, 0, .5);--status-indicator-color-intermediary-transparent:rgba(255, 170, 0, 0);--status-indicator-color-negative:rgb(255, 77, 77);--status-indicator-color-negative-semi:rgba(255, 77, 77, .5);--status-indicator-color-negative-transparent:rgba(255, 77, 77, 0)}@keyframes status-indicator-pulse{0%{box-shadow:0 0 0 0 var(--status-indicator-color-semi)}70%{box-shadow:0 0 0 var(--status-indicator-size) var(--status-indicator-color-transparent)}100%{box-shadow:0 0 0 0 var(--status-indicator-color-transparent)}}@keyframes status-indicator-pulse-active{0%{box-shadow:0 0 0 0 var(--status-indicator-color-active-semi)}70%{box-shadow:0 0 0 var(--status-indicator-size) var(--status-indicator-color-active-transparent)}100%{box-shadow:0 0 0 0 var(--status-indicator-color-active-transparent)}}@keyframes status-indicator-pulse-positive{0%{box-shadow:0 0 0 0 var(--status-indicator-color-positive-semi)}70%{box-shadow:0 0 0 var(--status-indicator-size) var(--status-indicator-color-positive-transparent)}100%{box-shadow:0 0 0 0 var(--status-indicator-color-positive-transparent)}}@keyframes status-indicator-pulse-intermediary{0%{box-shadow:0 0 0 0 var(--status-indicator-color-intermediary-semi)}70%{box-shadow:0 0 0 var(--status-indicator-size) var(--status-indicator-color-intermediary-transparent)}100%{box-shadow:0 0 0 0 var(--status-indicator-color-intermediary-transparent)}}@keyframes status-indicator-pulse-negative{0%{box-shadow:0 0 0 0 var(--status-indicator-color-negative-semi)}70%{box-shadow:0 0 0 var(--status-indicator-size) var(--status-indicator-color-negative-transparent)}100%{box-shadow:0 0 0 0 var(--status-indicator-color-negative-transparent)}}.status-indicator{display:inline-block;border-radius:50%;cursor:pointer;width:var(--status-indicator-size);height:var(--status-indicator-size);background-color:var(--status-indicator-color)}.status-indicator[pulse]{animation-name:status-indicator-pulse;animation-duration:var(--status-indicator-animation-duration);animation-timing-function:ease-in-out;animation-iteration-count:infinite;animation-direction:normal;animation-delay:0;animation-fill-mode:none}.status-indicator[active]{background-color:var(--status-indicator-color-active)}.status-indicator[active][pulse]{animation-name:status-indicator-pulse-active}.status-indicator[positive]{background-color:var(--status-indicator-color-positive);animation-name:status-indicator-pulse-positive}.status-indicator[positive][pulse]{animation-name:status-indicator-pulse-positive}.status-indicator[intermediary]{background-color:var(--status-indicator-color-intermediary)}.status-indicator[intermediary][pulse]{animation-name:status-indicator-pulse-intermediary}.status-indicator[negative]{background-color:var(--status-indicator-color-negative);animation-name:status-indicator-pulse-negative}.status-indicator[negative][pulse]{animation-name:status-indicator-pulse-negative}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__ = undefined;
  /* module identifier */
  const __vue_module_identifier__ = undefined;
  /* functional template */
  const __vue_is_functional_template__ = false;
  /* style inject SSR */
  

  
  var StatusIndicator = normalizeComponent_1(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    browser,
    undefined
  );

StatusIndicator.install = (Vue) => {
  Vue.component(StatusIndicator.name, StatusIndicator);
};

const components = [
  StatusIndicator,
];

function install(Vue) {
  if (install.installed) return;
  install.installed = true;
  components.forEach((component) => {
    Vue.component(component.name, component);
  });
}

const plugin = {
  install,
};

let GlobalVue = null;
if (typeof window !== 'undefined') {
  GlobalVue = window.Vue;
} else if (typeof global !== 'undefined') {
  GlobalVue = global.Vue;
}
if (GlobalVue) {
  GlobalVue.use(plugin);
}

export default plugin;
export { StatusIndicator, install };
